import os
import streamlit as st
import requests
import time
from PIL import Image
import numpy as np

# Define the base URI of the API
#   - Potential sources are in `.streamlit/secrets.toml` or in the Secrets section
#     on Streamlit Cloud
#   - The source selected is based on the shell variable passend when launching streamlit
#     (shortcuts are included in Makefile). By default it takes the cloud API url

#if 'API_URI' in os.environ:
#    BASE_URI = st.secrets[os.environ.get('API_URI')]
#else:
#BASE_URI = st.secrets['cloud_api_uri']
# Add a '/' at the end if it's not there
#BASE_URI = BASE_URI if BASE_URI.endswith('/') else BASE_URI + '/'
# Define the url to be used by requests.get to get a prediction (adapt if needed)
#url = BASE_URI + 'predict'


url = "https://aidetectorimage-5gqqh622wa-ew.a.run.app"

# Just displaying the source for the API. Remove this in your final version.
#st.markdown(f"Working with {url}")


# TODO: Add some titles, introduction, ...

st.image('media/logo2.png')

st.markdown("<h2 style='text-align: center; color: #E73D53;''>Uncover the Origins of Your Images with Cutting-Edge AI Technology</h2>", unsafe_allow_html=True)
st.markdown("</p>", unsafe_allow_html=True)
st.markdown("<div style='text-align: center;'>Embark on the future of image verification with AI Detector, unraveling the mysteries of this new pixelated realm!</div>", unsafe_allow_html=True)


# TODO: Request user input
st.markdown("</p>", unsafe_allow_html=True)
st.markdown("</p>", unsafe_allow_html=True)
st.markdown("<h3 style='text-align: center; color: #E73D53;'>Upload your picture</h3>", unsafe_allow_html=True)

st.set_option('deprecation.showfileUploaderEncoding', False)
img_file_buffer = st.file_uploader("Upload an image", type=['png', 'jpg'], label_visibility="hidden")

if img_file_buffer is not None:
    ### Display the image user uploaded
    col1, col2, col3 = st.columns([0.1, 0.8,0.1])
    with col1:
        pass
    with col2:
        st.image(Image.open(img_file_buffer))

        img_bytes = img_file_buffer.getvalue()

        ### Animation + API request
        trigger=False

        colA, colB, colC = st.columns([0.35, 0.3,0.35])
        with colA:
            pass
        with colB:
            if st.button("Is it fake?"):
                res = requests.post(url + "/get_prediction", files={'img': img_bytes})
                response = res.json()
                # with st.spinner('Wait for it...'):
                #     time.sleep(1)
                #     st.toast('Slowing it down to display this message')
                #     time.sleep(1)
                #     st.toast('Searching for the info on Kitt Le Wagon')
                #     time.sleep(1)
                #     st.toast('Raised a ticket with Jules van Rie ')
                #     time.sleep(1)
                #     st.toast('Checking Stackoverflow to make sure')
                #     time.sleep(1)
                #     st.toast('git status, add, commit "test"')
                #     time.sleep(2)
                #     st.toast('Hooray! We found something', icon='ðŸŽ‰')

                trigger = True
        with colC:
            pass

        not_ai_message = [
            "Definitely not AI bwahhh!!!",
            "No robots were harmed in the making of this image! It's as real as it gets!",
            "Definitely not AI, just a touch of 'Pixel Perfection'!",
            "Humans unite! Your image is proudly AI-free!",
            "Not a single byte of AI in sight! Your image is the real deal!"
        ]

        ai_message = [
            "No human touch here! Your image is pure AI magic!",
            "Looks like Picasso got some competition! Your image is AI-generated masterpiece!",
            "Busted! Your image is straight out of the AI art gallery!",
            "AI strikes again! Your image is digitally delightful!",
            "Sorry to burst your bubble, but your image screams AI creation!"
        ]

        if trigger:
            if res.status_code == 200:
            #accuracy = res["accuracy"]
                if response["prediction"]<=0.5:
                    st.markdown(f"<h3 style='text-align: center; color: #E73D53;'>{np.random.choice(not_ai_message, size =1)[0]}</h3>", unsafe_allow_html=True)
                    #st.progress(response['prediction'], text=f"There is {round(response['prediction']*100,2)}% chance that your image is generated by AI")
                else:
                    st.markdown(f"<h3 style='text-align: center; color: #E73D53;'>{np.random.choice(ai_message, size =1)[0]}</h3>", unsafe_allow_html=True)
                    #st.progress(response['prediction'], text=f"There is {round(response['prediction']*100,2)}% chance that your image is generated by AI")
            else:
                st.markdown("<h3 style='text-align: center; color: #E73D53;'>Oops, something went wrong ðŸ˜“ Please try again.</h3>", unsafe_allow_html=True)
                print(res.status_code, res.content)


    with col3:
        pass

    #st.image(Image.open(img_file_buffer))

    ### Get bytes from the file buffer




    # TODO: [OPTIONAL] maybe you can add some other pages?
    #   - some statistical data you collected in graphs
    #   - description of your product
    #   - a 'Who are we?'-page
